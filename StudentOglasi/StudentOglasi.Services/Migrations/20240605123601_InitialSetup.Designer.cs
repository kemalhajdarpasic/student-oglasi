// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentOglasi.Services.Database;

#nullable disable

namespace StudentOglasi.Services.Migrations
{
    [DbContext(typeof(StudentoglasiContext))]
    [Migration("20240605123601_InitialSetup")]
    partial class InitialSetup
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentOglasi.Services.Database.Fakulteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skracenica")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UniverzitetId")
                        .HasColumnType("int")
                        .HasColumnName("UniverzitetID");

                    b.HasKey("Id")
                        .HasName("PK_Fakultet");

                    b.HasIndex(new[] { "UniverzitetId" }, "IX_Fakultet_UniverzitetID");

                    b.ToTable("Fakulteti", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grad", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Kategorija", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Komentari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("KomentarId")
                        .HasColumnType("int")
                        .HasColumnName("KomentarID");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.Property<int?>("ObjavaId")
                        .HasColumnType("int")
                        .HasColumnName("ObjavaID");

                    b.Property<int?>("OglasId")
                        .HasColumnType("int")
                        .HasColumnName("OglasID");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Komentar");

                    b.HasIndex(new[] { "KomentarId" }, "IX_Komentar_KomentarID");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Komentar_KorisnikID");

                    b.HasIndex(new[] { "ObjavaId" }, "IX_Komentar_ObjavaID");

                    b.HasIndex(new[] { "OglasId" }, "IX_Komentar_OglasID");

                    b.ToTable("Komentari", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojTelefona")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.HasKey("Id")
                        .HasName("PK_Korisnik");

                    b.HasIndex(new[] { "UlogaId" }, "IX_Korisnici_UlogaID");

                    b.ToTable("Korisnici", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.NacinStudiranja", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__NacinStu__3214EC27E3E6A60C");

                    b.ToTable("NacinStudiranja", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Objave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Objava");

                    b.HasIndex(new[] { "KategorijaId" }, "IX_Objava_KategorijaID");

                    b.ToTable("Objave", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Ocjene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FakultetId")
                        .HasColumnType("int")
                        .HasColumnName("FakultetID");

                    b.Property<int?>("FirmaId")
                        .HasColumnType("int")
                        .HasColumnName("FirmaID");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmjestajId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajID");

                    b.Property<int?>("StipenditorId")
                        .HasColumnType("int")
                        .HasColumnName("StipenditorID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int?>("UniverzitetId")
                        .HasColumnType("int")
                        .HasColumnName("UniverzitetID");

                    b.Property<int>("Vrijednost")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Ocjena");

                    b.HasIndex("SmjestajId");

                    b.HasIndex(new[] { "FakultetId" }, "IX_Ocjena_FakultetID");

                    b.HasIndex(new[] { "FirmaId" }, "IX_Ocjena_FirmaID");

                    b.HasIndex(new[] { "StipenditorId" }, "IX_Ocjena_StipenditorID");

                    b.HasIndex(new[] { "StudentId" }, "IX_Ocjena_StudentId");

                    b.HasIndex(new[] { "UniverzitetId" }, "IX_Ocjena_UniverzitetID");

                    b.ToTable("Ocjene", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Oglasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RokPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Oglas");

                    b.ToTable("Oglasi", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Organizacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Firma");

                    b.HasIndex(new[] { "GradId" }, "IX_Firma_GradID");

                    b.ToTable("Organizacije", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Prakse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Benefiti")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("KrajPrakse")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kvalifikacije")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("OrganizacijaId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizacijaID");

                    b.Property<bool>("Placena")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PocetakPrakse")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("Id")
                        .HasName("PK_Praksa");

                    b.HasIndex(new[] { "OrganizacijaId" }, "IX_Prakse_OrganizacijaID");

                    b.HasIndex(new[] { "StatusId" }, "IX_Prakse_StatusID");

                    b.ToTable("Prakse", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijavePraksa", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("PraksaId")
                        .HasColumnType("int");

                    b.Property<string>("Certifikati")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CV");

                    b.Property<string>("PropratnoPismo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("StudentId", "PraksaId")
                        .HasName("PK_PrijavaPraksa");

                    b.HasIndex(new[] { "PraksaId" }, "IX_PrijavaPraksa_PraksaId");

                    b.HasIndex(new[] { "StatusId" }, "IX_PrijavePraksa_StatusID");

                    b.ToTable("PrijavePraksa", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijaveStipendija", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StipendijaId")
                        .HasColumnType("int")
                        .HasColumnName("StipendijaID");

                    b.Property<string>("Cv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CV");

                    b.Property<string>("Dokumentacija")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProsjekOcjena")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("StudentId", "StipendijaId")
                        .HasName("PK_PrijavaStipendija");

                    b.HasIndex(new[] { "StipendijaId" }, "IX_PrijavaStipendija_StipendijaID");

                    b.HasIndex(new[] { "StatusId" }, "IX_PrijaveStipendija_StatusID");

                    b.ToTable("PrijaveStipendija", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Rezervacije", b =>
                {
                    b.Property<int>("SmjestajnaJedinicaId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajnaJedinicaID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.Property<int?>("BrojOsoba")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("DatumOdjave")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime");

                    b.Property<string>("Napomena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("SmjestajnaJedinicaId", "StudentId")
                        .HasName("PK__Rezervac__A59BA9A7F156796A");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.ToTable("Rezervacije", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Slike", b =>
                {
                    b.Property<int>("SlikaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlikaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SmjestajId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajID");

                    b.Property<int?>("SmjestajnaJedinicaId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajnaJedinicaID");

                    b.HasKey("SlikaId")
                        .HasName("PK__Slike__FFAE2D46D39CF4CB");

                    b.HasIndex("SmjestajId");

                    b.HasIndex("SmjestajnaJedinicaId");

                    b.ToTable("Slike", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjerovi", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Smjerovi__3214EC273399A25C");

                    b.ToTable("Smjerovi", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjeroviFakulteti", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("FakultetId")
                        .HasColumnType("int")
                        .HasColumnName("FakultetID");

                    b.Property<int>("SmjerId")
                        .HasColumnType("int")
                        .HasColumnName("SmjerID");

                    b.HasKey("Id")
                        .HasName("PK__Smjerovi__3214EC275C1E8183");

                    b.HasIndex(new[] { "FakultetId" }, "IX_SmjeroviFakulteti_FakultetID");

                    b.HasIndex(new[] { "SmjerId" }, "IX_SmjeroviFakulteti_SmjerID");

                    b.ToTable("SmjeroviFakulteti", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjestaji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DodatneUsluge")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool?>("FitnessCentar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fitness_centar");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Parking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("parking");

                    b.Property<bool?>("Restoran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("restoran");

                    b.Property<int?>("TipSmjestajaId")
                        .HasColumnType("int")
                        .HasColumnName("TipSmjestajaID");

                    b.Property<bool?>("UslugePrijevoza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("usluge_prijevoza");

                    b.Property<bool?>("WiFi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("wi_fi");

                    b.HasKey("Id")
                        .HasName("PK__Smjestaj__3214EC27DA80F33F");

                    b.HasIndex("GradId");

                    b.HasIndex("TipSmjestajaId");

                    b.ToTable("Smjestaji", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjestajnaJedinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DodatneUsluge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<bool?>("KlimaUredjaj")
                        .HasColumnType("bit");

                    b.Property<bool?>("Kuhinja")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmjestajId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajID");

                    b.Property<bool?>("Terasa")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tv")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Smjestaj__3214EC276AF062E5");

                    b.HasIndex("SmjestajId");

                    b.ToTable("SmjestajnaJedinica", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusOglasi", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__StatusOg__3214EC27976EBE5C");

                    b.ToTable("StatusOglasi", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusPrijave", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__StatusPr__3214EC27C7C93E3C");

                    b.ToTable("StatusPrijave", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipendije", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("BrojStipendisata")
                        .HasColumnType("int");

                    b.Property<double>("Iznos")
                        .HasColumnType("float");

                    b.Property<string>("Izvor")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Kriterij")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("NivoObrazovanja")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("PotrebnaDokumentacija")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("StipenditorId")
                        .HasColumnType("int")
                        .HasColumnName("StipenditorID");

                    b.Property<string>("Uslovi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Stipendija");

                    b.HasIndex(new[] { "StatusId" }, "IX_Stipendije_StatusID");

                    b.HasIndex(new[] { "StipenditorId" }, "IX_Stipendije_StipenditorID");

                    b.ToTable("Stipendije", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipenditori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TipUstanove")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Stipenditor");

                    b.HasIndex(new[] { "GradId" }, "IX_Stipenditor_GradID");

                    b.ToTable("Stipenditori", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Studenti", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("BrojIndeksa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FakultetId")
                        .HasColumnType("int")
                        .HasColumnName("FakultetID");

                    b.Property<int>("GodinaStudija")
                        .HasColumnType("int");

                    b.Property<int>("NacinStudiranjaId")
                        .HasColumnType("int")
                        .HasColumnName("NacinStudiranjaID");

                    b.Property<decimal?>("ProsjecnaOcjena")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("SmjerId")
                        .HasColumnType("int")
                        .HasColumnName("SmjerID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_Student");

                    b.HasIndex(new[] { "FakultetId" }, "IX_Student_FakultetID");

                    b.HasIndex(new[] { "NacinStudiranjaId" }, "IX_Studenti_NacinStudiranjaID");

                    b.HasIndex(new[] { "SmjerId" }, "IX_Studenti_SmjerID");

                    b.ToTable("Studenti", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.TipSmjestaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__TipSmjes__3214EC27E9E84D99");

                    b.ToTable("TipSmjestaja", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Uloge__3214EC27140192D2");

                    b.ToTable("Uloge", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Univerziteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Skracenica")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Slika")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Univerzitet");

                    b.HasIndex(new[] { "GradId" }, "IX_Univerzitet_GradID");

                    b.ToTable("Univerziteti", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Fakulteti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Univerziteti", "Univerzitet")
                        .WithMany("Fakultetis")
                        .HasForeignKey("UniverzitetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Fakultet_Univerzitet_UniverzitetID");

                    b.Navigation("Univerzitet");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Komentari", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Komentari", "Komentar")
                        .WithMany("InverseKomentar")
                        .HasForeignKey("KomentarId")
                        .HasConstraintName("FK_Komentar_Komentar_KomentarID");

                    b.HasOne("StudentOglasi.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Komentaris")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Komentar_Korisnik_KorisnikID");

                    b.HasOne("StudentOglasi.Services.Database.Objave", "Objava")
                        .WithMany("Komentaris")
                        .HasForeignKey("ObjavaId")
                        .HasConstraintName("FK_Komentar_Objava_ObjavaID");

                    b.HasOne("StudentOglasi.Services.Database.Oglasi", "Oglas")
                        .WithMany("Komentaris")
                        .HasForeignKey("OglasId")
                        .HasConstraintName("FK_Komentar_Oglas_OglasID");

                    b.Navigation("Komentar");

                    b.Navigation("Korisnik");

                    b.Navigation("Objava");

                    b.Navigation("Oglas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Korisnici", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Uloge", "Uloga")
                        .WithMany("Korisnicis")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FK_Korisnici_Uloge");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Objave", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Objaves")
                        .HasForeignKey("KategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Objava_Kategorija_KategorijaID");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Ocjene", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Fakulteti", "Fakultet")
                        .WithMany("Ocjenes")
                        .HasForeignKey("FakultetId")
                        .HasConstraintName("FK_Ocjena_Fakultet_FakultetID");

                    b.HasOne("StudentOglasi.Services.Database.Organizacije", "Firma")
                        .WithMany("Ocjenes")
                        .HasForeignKey("FirmaId")
                        .HasConstraintName("FK_Ocjena_Firma_FirmaID");

                    b.HasOne("StudentOglasi.Services.Database.Smjestaji", "Smjestaj")
                        .WithMany("Ocjenes")
                        .HasForeignKey("SmjestajId")
                        .HasConstraintName("FK__Ocjene__Smjestaj__236943A5");

                    b.HasOne("StudentOglasi.Services.Database.Stipenditori", "Stipenditor")
                        .WithMany("Ocjenes")
                        .HasForeignKey("StipenditorId")
                        .HasConstraintName("FK_Ocjena_Stipenditor_StipenditorID");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("Ocjenes")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ocjena_Student_StudentId");

                    b.HasOne("StudentOglasi.Services.Database.Univerziteti", "Univerzitet")
                        .WithMany("Ocjenes")
                        .HasForeignKey("UniverzitetId")
                        .HasConstraintName("FK_Ocjena_Univerzitet_UniverzitetID");

                    b.Navigation("Fakultet");

                    b.Navigation("Firma");

                    b.Navigation("Smjestaj");

                    b.Navigation("Stipenditor");

                    b.Navigation("Student");

                    b.Navigation("Univerzitet");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Organizacije", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Organizacijes")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Firma_Grad_GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Prakse", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Oglasi", "IdNavigation")
                        .WithOne("Prakse")
                        .HasForeignKey("StudentOglasi.Services.Database.Prakse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Praksa_Oglas_ID");

                    b.HasOne("StudentOglasi.Services.Database.Organizacije", "Organizacija")
                        .WithMany("Prakses")
                        .HasForeignKey("OrganizacijaId")
                        .IsRequired()
                        .HasConstraintName("FK_Prakse_Organizacija");

                    b.HasOne("StudentOglasi.Services.Database.StatusOglasi", "Status")
                        .WithMany("Prakses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Prakse_StatusOglasi");

                    b.Navigation("IdNavigation");

                    b.Navigation("Organizacija");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijavePraksa", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Prakse", "Praksa")
                        .WithMany("PrijavePraksas")
                        .HasForeignKey("PraksaId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaPraksa_Praksa_PraksaId");

                    b.HasOne("StudentOglasi.Services.Database.StatusPrijave", "Status")
                        .WithMany("PrijavePraksas")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavePraksa_StatusPrijave");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("PrijavePraksas")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaPraksa_Student_StudentId");

                    b.Navigation("Praksa");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijaveStipendija", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.StatusPrijave", "Status")
                        .WithMany("PrijaveStipendijas")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijaveStipendija_StatusPrijave");

                    b.HasOne("StudentOglasi.Services.Database.Stipendije", "Stipendija")
                        .WithMany("PrijaveStipendijas")
                        .HasForeignKey("StipendijaId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaStipendija_Stipendija_StipendijaID");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("PrijaveStipendijas")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaStipendija_Student_StudentId");

                    b.Navigation("Status");

                    b.Navigation("Stipendija");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Rezervacije", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.SmjestajnaJedinica", "SmjestajnaJedinica")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("SmjestajnaJedinicaId")
                        .IsRequired()
                        .HasConstraintName("FK__Rezervaci__Smjes__1209AD79");

                    b.HasOne("StudentOglasi.Services.Database.StatusPrijave", "Status")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__Rezervaci__Statu__13F1F5EB");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Rezervaci__Stude__12FDD1B2");

                    b.Navigation("SmjestajnaJedinica");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Slike", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Smjestaji", "Smjestaj")
                        .WithMany("Slikes")
                        .HasForeignKey("SmjestajId")
                        .HasConstraintName("FK_Slike_Smjestaji");

                    b.HasOne("StudentOglasi.Services.Database.SmjestajnaJedinica", "SmjestajnaJedinica")
                        .WithMany("Slikes")
                        .HasForeignKey("SmjestajnaJedinicaId")
                        .HasConstraintName("FK_Slike_SmjestajnaJedinica");

                    b.Navigation("Smjestaj");

                    b.Navigation("SmjestajnaJedinica");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjeroviFakulteti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Fakulteti", "Fakultet")
                        .WithMany("SmjeroviFakultetis")
                        .HasForeignKey("FakultetId")
                        .IsRequired()
                        .HasConstraintName("FK__SmjeroviF__Fakul__6CD828CA");

                    b.HasOne("StudentOglasi.Services.Database.Smjerovi", "Smjer")
                        .WithMany("SmjeroviFakultetis")
                        .HasForeignKey("SmjerId")
                        .IsRequired()
                        .HasConstraintName("FK__SmjeroviF__Smjer__6BE40491");

                    b.Navigation("Fakultet");

                    b.Navigation("Smjer");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjestaji", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Smjestajis")
                        .HasForeignKey("GradId")
                        .IsRequired()
                        .HasConstraintName("FK__Smjestaji__GradI__2180FB33");

                    b.HasOne("StudentOglasi.Services.Database.TipSmjestaja", "TipSmjestaja")
                        .WithMany("Smjestajis")
                        .HasForeignKey("TipSmjestajaId")
                        .HasConstraintName("FK__Smjestaji__TipSm__40F9A68C");

                    b.Navigation("Grad");

                    b.Navigation("TipSmjestaja");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjestajnaJedinica", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Smjestaji", "Smjestaj")
                        .WithMany("SmjestajnaJedinicas")
                        .HasForeignKey("SmjestajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Smjestajn__Smjes__4F47C5E3");

                    b.Navigation("Smjestaj");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipendije", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Oglasi", "IdNavigation")
                        .WithOne("Stipendije")
                        .HasForeignKey("StudentOglasi.Services.Database.Stipendije", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Stipendija_Oglas_ID");

                    b.HasOne("StudentOglasi.Services.Database.StatusOglasi", "Status")
                        .WithMany("Stipendijes")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Stipendije_StatusOglasi");

                    b.HasOne("StudentOglasi.Services.Database.Stipenditori", "Stipenditor")
                        .WithMany("Stipendijes")
                        .HasForeignKey("StipenditorId")
                        .IsRequired()
                        .HasConstraintName("FK_Stipendije_Stipenditor");

                    b.Navigation("IdNavigation");

                    b.Navigation("Status");

                    b.Navigation("Stipenditor");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipenditori", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Stipenditoris")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Stipenditor_Grad_GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Studenti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Fakulteti", "Fakultet")
                        .WithMany("Studentis")
                        .HasForeignKey("FakultetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_Fakultet_FakultetID");

                    b.HasOne("StudentOglasi.Services.Database.Korisnici", "IdNavigation")
                        .WithOne("Studenti")
                        .HasForeignKey("StudentOglasi.Services.Database.Studenti", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_Korisnik_ID");

                    b.HasOne("StudentOglasi.Services.Database.NacinStudiranja", "NacinStudiranja")
                        .WithMany("Studentis")
                        .HasForeignKey("NacinStudiranjaId")
                        .IsRequired()
                        .HasConstraintName("FK_Studenti_NacinStudiranja");

                    b.HasOne("StudentOglasi.Services.Database.Smjerovi", "Smjer")
                        .WithMany("Studentis")
                        .HasForeignKey("SmjerId")
                        .IsRequired()
                        .HasConstraintName("FK_Studenti_Smjerovi");

                    b.Navigation("Fakultet");

                    b.Navigation("IdNavigation");

                    b.Navigation("NacinStudiranja");

                    b.Navigation("Smjer");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Univerziteti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Univerzitetis")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Univerzitet_Grad_GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Fakulteti", b =>
                {
                    b.Navigation("Ocjenes");

                    b.Navigation("SmjeroviFakultetis");

                    b.Navigation("Studentis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Grad", b =>
                {
                    b.Navigation("Organizacijes");

                    b.Navigation("Smjestajis");

                    b.Navigation("Stipenditoris");

                    b.Navigation("Univerzitetis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Objaves");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Komentari", b =>
                {
                    b.Navigation("InverseKomentar");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Korisnici", b =>
                {
                    b.Navigation("Komentaris");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.NacinStudiranja", b =>
                {
                    b.Navigation("Studentis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Objave", b =>
                {
                    b.Navigation("Komentaris");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Oglasi", b =>
                {
                    b.Navigation("Komentaris");

                    b.Navigation("Prakse");

                    b.Navigation("Stipendije");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Organizacije", b =>
                {
                    b.Navigation("Ocjenes");

                    b.Navigation("Prakses");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Prakse", b =>
                {
                    b.Navigation("PrijavePraksas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjerovi", b =>
                {
                    b.Navigation("SmjeroviFakultetis");

                    b.Navigation("Studentis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjestaji", b =>
                {
                    b.Navigation("Ocjenes");

                    b.Navigation("Slikes");

                    b.Navigation("SmjestajnaJedinicas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjestajnaJedinica", b =>
                {
                    b.Navigation("Rezervacijes");

                    b.Navigation("Slikes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusOglasi", b =>
                {
                    b.Navigation("Prakses");

                    b.Navigation("Stipendijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusPrijave", b =>
                {
                    b.Navigation("PrijavePraksas");

                    b.Navigation("PrijaveStipendijas");

                    b.Navigation("Rezervacijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipendije", b =>
                {
                    b.Navigation("PrijaveStipendijas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipenditori", b =>
                {
                    b.Navigation("Ocjenes");

                    b.Navigation("Stipendijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Studenti", b =>
                {
                    b.Navigation("Ocjenes");

                    b.Navigation("PrijavePraksas");

                    b.Navigation("PrijaveStipendijas");

                    b.Navigation("Rezervacijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.TipSmjestaja", b =>
                {
                    b.Navigation("Smjestajis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Uloge", b =>
                {
                    b.Navigation("Korisnicis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Univerziteti", b =>
                {
                    b.Navigation("Fakultetis");

                    b.Navigation("Ocjenes");
                });
#pragma warning restore 612, 618
        }
    }
}
