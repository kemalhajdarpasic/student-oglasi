// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentOglasi.Services.Database;

#nullable disable

namespace StudentOglasi.Services.Migrations
{
    [DbContext(typeof(StudentoglasiContext))]
    [Migration("20241021130044_UpdateObavijestiTable")]
    partial class UpdateObavijestiTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudentOglasi.Services.Database.Fakulteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Logo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Skracenica")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UniverzitetId")
                        .HasColumnType("int")
                        .HasColumnName("UniverzitetID");

                    b.HasKey("Id")
                        .HasName("PK_Fakultet");

                    b.HasIndex(new[] { "UniverzitetId" }, "IX_Fakultet_UniverzitetID");

                    b.ToTable("Fakulteti", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Adresa 1",
                            Email = "etf@unsa.com",
                            Link = "https://www.etf.unsa.ba/",
                            Naziv = "Elektrotehnički fakultet",
                            Skracenica = "ETF",
                            Telefon = "123-456",
                            UniverzitetId = 1
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Adresa 2",
                            Email = "mf@unsa.com",
                            Link = "https://www.mf.unsa.ba/",
                            Naziv = "Medicinski fakultet",
                            Skracenica = "MF",
                            Telefon = "123-457",
                            UniverzitetId = 1
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Adresa 3",
                            Email = "fit@unmo.com",
                            Link = "https://www.fit.ba/",
                            Naziv = "Fakultet informacijskih tehnologija",
                            Skracenica = "FIT",
                            Telefon = "123-458",
                            UniverzitetId = 2
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Grad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Banja Luka"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Bihać"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Goražde"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Jablanica"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Konjic"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "Tuzla"
                        },
                        new
                        {
                            Id = 9,
                            Naziv = "Zenica"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Kategorija", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Edukacija"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Ponude i popusti"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Aktivnosti i događaji"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Tehnologija"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Komentari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentKomentarId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime?>("VrijemeObjave")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK__Komentar__3214EC073529E1CC");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Komentar_KorisnikID");

                    b.HasIndex(new[] { "ParentKomentarId" }, "IX_Komentar_ParentKomentarId");

                    b.HasIndex(new[] { "PostId" }, "IX_Komentar_PostID");

                    b.ToTable("Komentari", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Korisnici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BrojTelefona")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    b.HasKey("Id")
                        .HasName("PK_Korisnik");

                    b.HasIndex(new[] { "UlogaId" }, "IX_Korisnici_UlogaID");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "kemal.hajdarpasic@edu.fit.ba",
                            Ime = "Kemal",
                            KorisnickoIme = "admin",
                            LozinkaHash = "JfJzsL3ngGWki+Dn67C+8WLy73I=",
                            LozinkaSalt = "7TUJfmgkkDvcY3PB/M4fhg==",
                            Prezime = "Hajdarpasic",
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "lejla.hadzovic@edu.fit.ba",
                            Ime = "Lejla",
                            KorisnickoIme = "lejla",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Hadzovic",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 3,
                            Email = "kemal.hajdarpasic@edu.fit.ba",
                            Ime = "Kemal",
                            KorisnickoIme = "kemal",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Hajdarpasic",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 4,
                            Email = "amir@example.com",
                            Ime = "Amir",
                            KorisnickoIme = "amir",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Bajric",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 5,
                            Email = "jasmina@example.com",
                            Ime = "Jasmina",
                            KorisnickoIme = "jasmina",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Nalic",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 6,
                            Email = "nina@example.com",
                            Ime = "Nina",
                            KorisnickoIme = "nina",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Milic",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 7,
                            Email = "sm@example.com",
                            Ime = "Selma",
                            KorisnickoIme = "selma",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Mujagic",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 8,
                            Email = "nh@example.com",
                            Ime = "Nedim",
                            KorisnickoIme = "nedim",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Hodzic",
                            UlogaId = 2
                        },
                        new
                        {
                            Id = 9,
                            Email = "jh@example.com",
                            Ime = "Jasmina",
                            KorisnickoIme = "jasmina",
                            LozinkaHash = "ug0GgEnT5hKaHsfTn1l1kiGvZAg=",
                            LozinkaSalt = "qh31pfpS2ox1h96QPhmR/Q==",
                            Prezime = "Hadziabdic",
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int")
                        .HasColumnName("ItemID");

                    b.Property<string>("ItemType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikID");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "KorisnikId" }, "IX_Like_KorisnikID");

                    b.ToTable("Like", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.NacinStudiranja", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__NacinStu__3214EC27E3E6A60C");

                    b.ToTable("NacinStudiranja", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Redovno"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Vanredno"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "DL",
                            Opis = "Distance learning"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Obavijesti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumKreiranja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ObjaveId")
                        .HasColumnType("int");

                    b.Property<int?>("OglasiId")
                        .HasColumnType("int");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmjestajiId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Obavijes__3214EC0753F85485");

                    b.HasIndex("ObjaveId");

                    b.HasIndex(new[] { "OglasiId" }, "IX_Obavijesti_OglasiId");

                    b.HasIndex(new[] { "SmjestajiId" }, "IX_Obavijesti_SmjestajiId");

                    b.ToTable("Obavijesti", (string)null);
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Objave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Objava");

                    b.HasIndex(new[] { "KategorijaId" }, "IX_Objava_KategorijaID");

                    b.ToTable("Objave", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KategorijaId = 2,
                            Naslov = "Novi kurs programiranja",
                            Sadrzaj = "Prijavite se za novi kurs programiranja koji počinje uskoro.",
                            Slika = "student.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            KategorijaId = 3,
                            Naslov = "Poziv za volontiranje",
                            Sadrzaj = "Pridružite se našem timu volontera i steknite dragocjeno iskustvo.",
                            Slika = "students.png",
                            VrijemeObjave = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            KategorijaId = 4,
                            Naslov = "Takmičenje u inovacijama",
                            Sadrzaj = "Učestvujte u takmičenju u inovacijama i osvojite vrijedne nagrade.",
                            Slika = "studentlife.png",
                            VrijemeObjave = new DateTime(2024, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Ocjene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ocjena")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Ocjene__3214EC27B212595A");

                    b.HasIndex(new[] { "StudentId" }, "IX_Ocjene_StudentId");

                    b.ToTable("Ocjene", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ocjena = 5m,
                            PostId = 1,
                            PostType = "internship",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 2,
                            Ocjena = 5m,
                            PostId = 2,
                            PostType = "internship",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 3,
                            Ocjena = 4m,
                            PostId = 1,
                            PostType = "internship",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 4,
                            Ocjena = 3m,
                            PostId = 2,
                            PostType = "internship",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 5,
                            Ocjena = 5m,
                            PostId = 5,
                            PostType = "internship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 6,
                            Ocjena = 4m,
                            PostId = 6,
                            PostType = "internship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 7,
                            Ocjena = 3m,
                            PostId = 7,
                            PostType = "internship",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 8,
                            Ocjena = 5m,
                            PostId = 8,
                            PostType = "internship",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 9,
                            Ocjena = 4m,
                            PostId = 9,
                            PostType = "internship",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 10,
                            Ocjena = 3m,
                            PostId = 1,
                            PostType = "internship",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 11,
                            Ocjena = 5m,
                            PostId = 2,
                            PostType = "internship",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 12,
                            Ocjena = 4m,
                            PostId = 5,
                            PostType = "internship",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 13,
                            Ocjena = 3m,
                            PostId = 6,
                            PostType = "internship",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 14,
                            Ocjena = 5m,
                            PostId = 7,
                            PostType = "internship",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 15,
                            Ocjena = 4m,
                            PostId = 8,
                            PostType = "internship",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 16,
                            Ocjena = 5m,
                            PostId = 9,
                            PostType = "internship",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 17,
                            Ocjena = 3m,
                            PostId = 5,
                            PostType = "internship",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 18,
                            Ocjena = 5m,
                            PostId = 6,
                            PostType = "internship",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 19,
                            Ocjena = 4m,
                            PostId = 7,
                            PostType = "internship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 20,
                            Ocjena = 5m,
                            PostId = 8,
                            PostType = "internship",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 21,
                            Ocjena = 5m,
                            PostId = 3,
                            PostType = "scholarship",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 22,
                            Ocjena = 4m,
                            PostId = 4,
                            PostType = "scholarship",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 23,
                            Ocjena = 5m,
                            PostId = 10,
                            PostType = "scholarship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 24,
                            Ocjena = 3m,
                            PostId = 11,
                            PostType = "scholarship",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 25,
                            Ocjena = 5m,
                            PostId = 12,
                            PostType = "scholarship",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 26,
                            Ocjena = 4m,
                            PostId = 13,
                            PostType = "scholarship",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 27,
                            Ocjena = 5m,
                            PostId = 14,
                            PostType = "scholarship",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 28,
                            Ocjena = 3m,
                            PostId = 3,
                            PostType = "scholarship",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 29,
                            Ocjena = 5m,
                            PostId = 4,
                            PostType = "scholarship",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 30,
                            Ocjena = 5m,
                            PostId = 3,
                            PostType = "scholarship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 31,
                            Ocjena = 5m,
                            PostId = 11,
                            PostType = "scholarship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 32,
                            Ocjena = 3m,
                            PostId = 12,
                            PostType = "scholarship",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 33,
                            Ocjena = 5m,
                            PostId = 13,
                            PostType = "scholarship",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 34,
                            Ocjena = 4m,
                            PostId = 14,
                            PostType = "scholarship",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 35,
                            Ocjena = 5m,
                            PostId = 3,
                            PostType = "scholarship",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 36,
                            Ocjena = 3m,
                            PostId = 4,
                            PostType = "scholarship",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 37,
                            Ocjena = 5m,
                            PostId = 10,
                            PostType = "scholarship",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 38,
                            Ocjena = 4m,
                            PostId = 11,
                            PostType = "scholarship",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 39,
                            Ocjena = 5m,
                            PostId = 12,
                            PostType = "scholarship",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 40,
                            Ocjena = 3m,
                            PostId = 13,
                            PostType = "scholarship",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 41,
                            Ocjena = 5m,
                            PostId = 1,
                            PostType = "accommodation",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 42,
                            Ocjena = 4m,
                            PostId = 2,
                            PostType = "accommodation",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 43,
                            Ocjena = 3m,
                            PostId = 3,
                            PostType = "accommodation",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 44,
                            Ocjena = 5m,
                            PostId = 4,
                            PostType = "accommodation",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 45,
                            Ocjena = 4m,
                            PostId = 5,
                            PostType = "accommodation",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 46,
                            Ocjena = 5m,
                            PostId = 1,
                            PostType = "accommodation",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 47,
                            Ocjena = 5m,
                            PostId = 2,
                            PostType = "accommodation",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 48,
                            Ocjena = 4m,
                            PostId = 3,
                            PostType = "accommodation",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 49,
                            Ocjena = 3m,
                            PostId = 4,
                            PostType = "accommodation",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 50,
                            Ocjena = 5m,
                            PostId = 5,
                            PostType = "accommodation",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 51,
                            Ocjena = 4m,
                            PostId = 1,
                            PostType = "accommodation",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 52,
                            Ocjena = 3m,
                            PostId = 2,
                            PostType = "accommodation",
                            StudentId = 5
                        },
                        new
                        {
                            Id = 53,
                            Ocjena = 5m,
                            PostId = 3,
                            PostType = "accommodation",
                            StudentId = 6
                        },
                        new
                        {
                            Id = 54,
                            Ocjena = 4m,
                            PostId = 4,
                            PostType = "accommodation",
                            StudentId = 7
                        },
                        new
                        {
                            Id = 55,
                            Ocjena = 5m,
                            PostId = 5,
                            PostType = "accommodation",
                            StudentId = 8
                        },
                        new
                        {
                            Id = 56,
                            Ocjena = 5m,
                            PostId = 1,
                            PostType = "accommodation",
                            StudentId = 9
                        },
                        new
                        {
                            Id = 57,
                            Ocjena = 5m,
                            PostId = 2,
                            PostType = "accommodation",
                            StudentId = 2
                        },
                        new
                        {
                            Id = 58,
                            Ocjena = 4m,
                            PostId = 3,
                            PostType = "accommodation",
                            StudentId = 3
                        },
                        new
                        {
                            Id = 59,
                            Ocjena = 3m,
                            PostId = 4,
                            PostType = "accommodation",
                            StudentId = 4
                        },
                        new
                        {
                            Id = 60,
                            Ocjena = 5m,
                            PostId = 5,
                            PostType = "accommodation",
                            StudentId = 5
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Oglasi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RokPrijave")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slika")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("VrijemeObjave")
                        .HasColumnType("datetime2");

                    b.HasKey("Id")
                        .HasName("PK_Oglas");

                    b.ToTable("Oglasi", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naslov = "Računovodstvo u praksi",
                            Opis = "Ova praksa omogućava sticanje praktičnog iskustva u vođenju knjiga, pripremi financijskih izvještaja, obračunu plata i poreza, te primjeni računovodstvenih standarda.",
                            RokPrijave = new DateTime(2024, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship1.png",
                            VrijemeObjave = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Naslov = "Praksa u marketingu za studente završnih godina",
                            Opis = "Pridružite se našem dinamičnom marketing timu i steknite dragoceno iskustvo! Nudimo plaćenu praksu za studente završnih godina ekonomskih i menadžment fakulteta. Tokom prakse, radit ćete na stvarnim projektima, učiti od iskusnih profesionalaca i razvijati svoje veštine. Prijave su otvorene do kraja meseca. Ne propustite priliku!",
                            RokPrijave = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship2.png",
                            VrijemeObjave = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Naslov = "Erasmus+ stipendije za zimski semestar na Univerzitetu u Ljubljani",
                            Opis = "Ured za međunarodnu saradnju Univerziteta u Zenici objavljuje Konkurs za prijavu studenata za razmjenu u zimskom semestru 2024/25. godine u okviru Erasmus+ programa za Univerzitet u Ljubljani, Slovenija.",
                            RokPrijave = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship1.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Naslov = "Stipendiranje učenika i studenata za 2023/2024. godinu",
                            Opis = "Sa zadovoljstvom objavljujemo konkurs za stipendiranje talentovanih učenika i studenata za školsku 2023/2024. godinu. Ova stipendija je namenjena učenicima srednjih škola i studentima svih nivoa studija koji pokazuju izvrsne akademske rezultate, posvećenost i želju za daljim obrazovanjem.",
                            RokPrijave = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship1.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Naslov = "Praksa u IT sektoru - Software Development",
                            Opis = "Pridružite se našem IT timu i učestvujte u razvoju softverskih rješenja! Ova praksa nudi priliku za rad na stvarnim projektima, upoznavanje sa najsavremenijim tehnologijama i proširivanje vaših vještina u programiranju.",
                            RokPrijave = new DateTime(2024, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship3.png",
                            VrijemeObjave = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Naslov = "Praksa u oblasti ljudskih resursa",
                            Opis = "Ova praksa vam omogućava sticanje praktičnog iskustva u regrutaciji, upravljanju talentima i organizaciji zaposlenih. Idealna prilika za studente koji žele karijeru u HR sektoru.",
                            RokPrijave = new DateTime(2024, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship4.png",
                            VrijemeObjave = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Naslov = "Praksa u finansijama",
                            Opis = "Praksa u našem financijskom timu nudi priliku za rad na analizi financijskih podataka, planiranju budžeta i pripremi izvještaja. Idealan početak za one koji žele karijeru u financijama.",
                            RokPrijave = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship5.png",
                            VrijemeObjave = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Naslov = "Praksa u dizajnu",
                            Opis = "Ako volite kreativni rad, ova praksa vam nudi priliku da radite sa našim dizajnerskim timom na stvaranju vizuelnih rješenja za digitalne i štampane medije.",
                            RokPrijave = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship1.png",
                            VrijemeObjave = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Naslov = "Praksa u turizmu i hotelijerstvu",
                            Opis = "Steknite iskustvo u radu sa gostima i organizaciji turističkih aranžmana. Ova praksa je savršena za studente turizma i ugostiteljstva.",
                            RokPrijave = new DateTime(2024, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "internship2.png",
                            VrijemeObjave = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Naslov = "Stipendije za master studije u inostranstvu",
                            Opis = "Ova stipendija pokriva troškove školarine i života za master studije u inostranstvu. Idealna prilika za studente koji žele nastaviti obrazovanje na prestižnim univerzitetima.",
                            RokPrijave = new DateTime(2024, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship2.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Naslov = "Stipendije za studente tehničkih nauka",
                            Opis = "Stipendije namijenjene studentima tehničkih fakulteta koji pokazuju izuzetne rezultate u studiranju i želju za usavršavanjem u oblasti tehničkih nauka.",
                            RokPrijave = new DateTime(2024, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship3.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Naslov = "Stipendije za socijalno ugrožene studente",
                            Opis = "Ova stipendija namijenjena je studentima iz socijalno ugroženih porodica, sa ciljem da im se pruži podrška u nastavku obrazovanja.",
                            RokPrijave = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship4.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Naslov = "Stipendije za istraživačke projekte",
                            Opis = "Stipendije za studente koji rade na inovativnim istraživačkim projektima u oblasti prirodnih nauka. Prilika za finansijsku podršku i dalji razvoj istraživačkog rada.",
                            RokPrijave = new DateTime(2024, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship5.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Naslov = "Erasmus+ stipendije za studente na razmjeni",
                            Opis = "Prilika za studente koji žele studirati jedan semestar u inostranstvu kroz Erasmus+ program. Stipendija pokriva troškove puta, smještaja i školarine.",
                            RokPrijave = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slika = "scholarship1.jpg",
                            VrijemeObjave = new DateTime(2024, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Organizacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Firma");

                    b.HasIndex(new[] { "GradId" }, "IX_Firma_GradID");

                    b.ToTable("Organizacije", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Maršala Tita 5, Sarajevo",
                            Email = "contact@ithubsarajevo.com",
                            GradId = 7,
                            Link = "www.ithubsarajevo.com",
                            Naziv = "IT Hub Sarajevo",
                            Telefon = "033-987-654"
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Stjepana Radića 10, Mostar",
                            Email = "support@msmostar.com",
                            GradId = 6,
                            Link = "www.msmostar.com",
                            Naziv = "Marketing Solutions Mostar",
                            Telefon = "036-456-789"
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Maršala Tita 15, Sarajevo",
                            Email = "info@finconsult.ba",
                            GradId = 7,
                            Link = "www.finconsult.ba",
                            Naziv = "FinConsult Sarajevo",
                            Telefon = "033-123-456"
                        },
                        new
                        {
                            Id = 4,
                            Adresa = "Kralja Tomislava 22, Mostar",
                            Email = "contact@dmmostar.com",
                            GradId = 6,
                            Link = "www.dmmostar.com",
                            Naziv = "DigitalMarketing",
                            Telefon = "036-234-567"
                        },
                        new
                        {
                            Id = 5,
                            Adresa = "Šetalište Slana Banja 7, Tuzla",
                            Email = "support@techhubtuzla.com",
                            GradId = 8,
                            Link = "www.techhubtuzla.com",
                            Naziv = "TechHub Tuzla",
                            Telefon = "035-567-890"
                        },
                        new
                        {
                            Id = 6,
                            Adresa = "Titova 21, Zenica",
                            Email = "info@hrsolutionszenica.com",
                            GradId = 9,
                            Link = "www.hrsolutionszenica.com",
                            Naziv = "HR Solutions Zenica",
                            Telefon = "032-345-678"
                        },
                        new
                        {
                            Id = 7,
                            Adresa = "Zmaja od Bosne 45, Sarajevo",
                            Email = "contact@financexperts.ba",
                            GradId = 7,
                            Link = "www.financexperts.ba",
                            Naziv = "Finance Experts",
                            Telefon = "033-987-654"
                        },
                        new
                        {
                            Id = 8,
                            Adresa = "Kralja Petra I Karađorđevića 10, Banja Luka",
                            Email = "info@creativedesignbl.com",
                            GradId = 1,
                            Link = "www.creativedesignbl.com",
                            Naziv = "Creative Design Studio",
                            Telefon = "051-456-789"
                        },
                        new
                        {
                            Id = 9,
                            Adresa = "Zeleni Val 3, Bihać",
                            Email = "contact@tourismsolutionsbihac.com",
                            GradId = 2,
                            Link = "www.tourismsolutionsbihac.com",
                            Naziv = "Tourism Solutions",
                            Telefon = "037-123-456"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Prakse", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Benefiti")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("KrajPrakse")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kvalifikacije")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("OrganizacijaId")
                        .HasColumnType("int")
                        .HasColumnName("OrganizacijaID");

                    b.Property<bool>("Placena")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PocetakPrakse")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("Id")
                        .HasName("PK_Praksa");

                    b.HasIndex(new[] { "OrganizacijaId" }, "IX_Prakse_OrganizacijaID");

                    b.HasIndex(new[] { "StatusId" }, "IX_Prakse_StatusID");

                    b.ToTable("Prakse", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Benefiti = "Besplatan ručak",
                            KrajPrakse = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Poznavanje rada na računaru",
                            OrganizacijaId = 1,
                            Placena = true,
                            PocetakPrakse = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        },
                        new
                        {
                            Id = 2,
                            Benefiti = "Besplatan prevoz",
                            KrajPrakse = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Poznavanje programiranja",
                            OrganizacijaId = 2,
                            Placena = false,
                            PocetakPrakse = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        },
                        new
                        {
                            Id = 5,
                            Benefiti = "Mentorska podrška",
                            KrajPrakse = new DateTime(2024, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Iskustvo u programiranju",
                            OrganizacijaId = 3,
                            Placena = true,
                            PocetakPrakse = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        },
                        new
                        {
                            Id = 6,
                            Benefiti = "Praktično iskustvo u HR-u",
                            KrajPrakse = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Osnove regrutacije i upravljanja talentima",
                            OrganizacijaId = 4,
                            Placena = false,
                            PocetakPrakse = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        },
                        new
                        {
                            Id = 7,
                            Benefiti = "Mentorska podrška",
                            KrajPrakse = new DateTime(2024, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Osnovno znanje financijske analize",
                            OrganizacijaId = 5,
                            Placena = true,
                            PocetakPrakse = new DateTime(2024, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        },
                        new
                        {
                            Id = 8,
                            Benefiti = "Rad u kreativnom timu",
                            KrajPrakse = new DateTime(2024, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Osnovno znanje dizajna",
                            OrganizacijaId = 8,
                            Placena = false,
                            PocetakPrakse = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        },
                        new
                        {
                            Id = 9,
                            Benefiti = "Iskustvo u radu sa gostima",
                            KrajPrakse = new DateTime(2024, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Kvalifikacije = "Poznavanje turizma i ugostiteljstva",
                            OrganizacijaId = 9,
                            Placena = true,
                            PocetakPrakse = new DateTime(2024, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijavePraksa", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("PraksaId")
                        .HasColumnType("int");

                    b.Property<string>("Certifikati")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Cv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CV");

                    b.Property<string>("PropratnoPismo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("StudentId", "PraksaId")
                        .HasName("PK_PrijavaPraksa");

                    b.HasIndex(new[] { "PraksaId" }, "IX_PrijavaPraksa_PraksaId");

                    b.HasIndex(new[] { "StatusId" }, "IX_PrijavePraksa_StatusID");

                    b.ToTable("PrijavePraksa", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 2,
                            PraksaId = 1,
                            Certifikati = "Certifikati_studenta_1.pdf",
                            Cv = "CV_studenta_1.pdf",
                            PropratnoPismo = "Propratno_pismo_1.pdf",
                            StatusId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            PraksaId = 2,
                            Certifikati = "Certifikati_studenta_2.pdf",
                            Cv = "CV_studenta_2.pdf",
                            PropratnoPismo = "Propratno_pismo_2.pdf",
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijaveStipendija", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StipendijaId")
                        .HasColumnType("int")
                        .HasColumnName("StipendijaID");

                    b.Property<string>("Cv")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("CV");

                    b.Property<string>("Dokumentacija")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("ProsjekOcjena")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.HasKey("StudentId", "StipendijaId")
                        .HasName("PK_PrijavaStipendija");

                    b.HasIndex(new[] { "StipendijaId" }, "IX_PrijavaStipendija_StipendijaID");

                    b.HasIndex(new[] { "StatusId" }, "IX_PrijaveStipendija_StatusID");

                    b.ToTable("PrijaveStipendija", (string)null);

                    b.HasData(
                        new
                        {
                            StudentId = 2,
                            StipendijaId = 3,
                            Cv = "CV_studenta_1.pdf",
                            Dokumentacija = "Dokumentacija_studenta_1.pdf",
                            ProsjekOcjena = 8.5m,
                            StatusId = 2
                        },
                        new
                        {
                            StudentId = 3,
                            StipendijaId = 4,
                            Cv = "CV_studenta_2.pdf",
                            Dokumentacija = "Dokumentacija_studenta_2.pdf",
                            ProsjekOcjena = 9.0m,
                            StatusId = 2
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Rezervacije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BrojOsoba")
                        .HasColumnType("int");

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("DatumOdjave")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatumPrijave")
                        .HasColumnType("datetime");

                    b.Property<string>("Napomena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SmjestajnaJedinicaId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Rezervac__CABA44DDB20D5066");

                    b.HasIndex(new[] { "SmjestajnaJedinicaId" }, "IX_Rezervacije_SmjestajnaJedinicaId");

                    b.HasIndex(new[] { "StatusId" }, "IX_Rezervacije_StatusId");

                    b.HasIndex(new[] { "StudentId" }, "IX_Rezervacije_StudentId");

                    b.ToTable("Rezervacije", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojOsoba = 2,
                            Cijena = 200.00m,
                            DatumOdjave = new DateTime(2024, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPrijave = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Napomena = "Napomena o rezervaciji",
                            SmjestajnaJedinicaId = 1,
                            StatusId = 2,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 2,
                            BrojOsoba = 3,
                            Cijena = 300.00m,
                            DatumOdjave = new DateTime(2024, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumPrijave = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SmjestajnaJedinicaId = 2,
                            StatusId = 2,
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Slike", b =>
                {
                    b.Property<int>("SlikaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SlikaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SlikaId"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("SmjestajId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajID");

                    b.Property<int?>("SmjestajnaJedinicaId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajnaJedinicaID");

                    b.HasKey("SlikaId")
                        .HasName("PK__Slike__FFAE2D46D39CF4CB");

                    b.HasIndex(new[] { "SmjestajId" }, "IX_Slike_SmjestajID");

                    b.HasIndex(new[] { "SmjestajnaJedinicaId" }, "IX_Slike_SmjestajnaJedinicaID");

                    b.ToTable("Slike", (string)null);

                    b.HasData(
                        new
                        {
                            SlikaId = 1,
                            Naziv = "hotel1.jpg",
                            SmjestajId = 1
                        },
                        new
                        {
                            SlikaId = 2,
                            Naziv = "apartment_a1.jpg",
                            SmjestajnaJedinicaId = 1
                        },
                        new
                        {
                            SlikaId = 3,
                            Naziv = "apartment_a2.jpg",
                            SmjestajnaJedinicaId = 1
                        },
                        new
                        {
                            SlikaId = 4,
                            Naziv = "hotel2.jpg",
                            SmjestajId = 2
                        },
                        new
                        {
                            SlikaId = 5,
                            Naziv = "hotel3.jpg",
                            SmjestajId = 3
                        },
                        new
                        {
                            SlikaId = 6,
                            Naziv = "ap1.jpg",
                            SmjestajnaJedinicaId = 4
                        },
                        new
                        {
                            SlikaId = 7,
                            Naziv = "ap2.jpg",
                            SmjestajnaJedinicaId = 5
                        },
                        new
                        {
                            SlikaId = 8,
                            Naziv = "ap4.jpg",
                            SmjestajnaJedinicaId = 6
                        },
                        new
                        {
                            SlikaId = 9,
                            Naziv = "ap6.jpg",
                            SmjestajnaJedinicaId = 6
                        },
                        new
                        {
                            SlikaId = 10,
                            Naziv = "ap1.jpg",
                            SmjestajnaJedinicaId = 1
                        },
                        new
                        {
                            SlikaId = 11,
                            Naziv = "ap2.jpg",
                            SmjestajnaJedinicaId = 4
                        },
                        new
                        {
                            SlikaId = 12,
                            Naziv = "ap9.jpg",
                            SmjestajnaJedinicaId = 3
                        },
                        new
                        {
                            SlikaId = 13,
                            Naziv = "hotel2.jpg",
                            SmjestajId = 1
                        },
                        new
                        {
                            SlikaId = 14,
                            Naziv = "hotel3.jpg",
                            SmjestajId = 3
                        },
                        new
                        {
                            SlikaId = 15,
                            Naziv = "hotel2.jpg",
                            SmjestajId = 4
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjerovi", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Smjerovi__3214EC273399A25C");

                    b.ToTable("Smjerovi", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Softverski inženjering"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Razvoj softvera"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Mašinstvo"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Računarstvo i informatika"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Klinicka medicina",
                            Opis = "Studij koji se fokusira na kliničke aspekte medicine."
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjeroviFakulteti", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("FakultetId")
                        .HasColumnType("int")
                        .HasColumnName("FakultetID");

                    b.Property<int>("SmjerId")
                        .HasColumnType("int")
                        .HasColumnName("SmjerID");

                    b.HasKey("Id")
                        .HasName("PK__Smjerovi__3214EC275C1E8183");

                    b.HasIndex(new[] { "FakultetId" }, "IX_SmjeroviFakulteti_FakultetID");

                    b.HasIndex(new[] { "SmjerId" }, "IX_SmjeroviFakulteti_SmjerID");

                    b.ToTable("SmjeroviFakulteti", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FakultetId = 3,
                            SmjerId = 1
                        },
                        new
                        {
                            Id = 2,
                            FakultetId = 3,
                            SmjerId = 2
                        },
                        new
                        {
                            Id = 3,
                            FakultetId = 1,
                            SmjerId = 1
                        },
                        new
                        {
                            Id = 4,
                            FakultetId = 1,
                            SmjerId = 4
                        },
                        new
                        {
                            Id = 5,
                            FakultetId = 2,
                            SmjerId = 5
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjestaji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DodatneUsluge")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<bool?>("FitnessCentar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fitness_centar");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Parking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("parking");

                    b.Property<bool?>("Restoran")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("restoran");

                    b.Property<int?>("TipSmjestajaId")
                        .HasColumnType("int")
                        .HasColumnName("TipSmjestajaID");

                    b.Property<bool?>("UslugePrijevoza")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("usluge_prijevoza");

                    b.Property<bool?>("WiFi")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("wi_fi");

                    b.HasKey("Id")
                        .HasName("PK__Smjestaj__3214EC27DA80F33F");

                    b.HasIndex(new[] { "GradId" }, "IX_Smjestaji_GradID");

                    b.HasIndex(new[] { "TipSmjestajaId" }, "IX_Smjestaji_TipSmjestajaID");

                    b.ToTable("Smjestaji", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Adresa 1",
                            FitnessCentar = true,
                            GradId = 7,
                            Naziv = "Hotel Sarajevo",
                            Opis = "Moderan hotel u srcu Sarajeva, nudi savremene sobe, restoran i wellness centar. Idealno za poslovne i turističke posjete.",
                            Parking = true,
                            Restoran = true,
                            TipSmjestajaId = 1,
                            UslugePrijevoza = true,
                            WiFi = true
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Adresa 3",
                            FitnessCentar = false,
                            GradId = 6,
                            Naziv = "Apartman Mostar",
                            Opis = "Opis apartmana u Mostaru",
                            Parking = false,
                            Restoran = false,
                            TipSmjestajaId = 2,
                            UslugePrijevoza = false,
                            WiFi = true
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Adresa 4",
                            FitnessCentar = false,
                            GradId = 2,
                            Naziv = "Apartman Green",
                            Opis = "Komforan apartman sa velikom terasom.",
                            Parking = false,
                            Restoran = false,
                            TipSmjestajaId = 2,
                            UslugePrijevoza = false,
                            WiFi = true
                        },
                        new
                        {
                            Id = 4,
                            Adresa = "Adresa 5",
                            DodatneUsluge = "Bazen, sauna",
                            FitnessCentar = true,
                            GradId = 5,
                            Naziv = "Villa Luxury",
                            Opis = "Ekskluzivna vila sa bazenom i luksuznim sadržajima.",
                            Parking = true,
                            Restoran = false,
                            TipSmjestajaId = 1,
                            UslugePrijevoza = true,
                            WiFi = true
                        },
                        new
                        {
                            Id = 5,
                            Adresa = "Adresa 5",
                            DodatneUsluge = "Spa, bazen, sauna",
                            FitnessCentar = true,
                            GradId = 9,
                            Naziv = "Hotel Lux",
                            Opis = "Ekskluzivni hotel sa luksuznim sadržajima i uslugama.",
                            Parking = true,
                            Restoran = true,
                            TipSmjestajaId = 1,
                            UslugePrijevoza = true,
                            WiFi = true
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjestajnaJedinica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cijena")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("DodatneUsluge")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Kapacitet")
                        .HasColumnType("int");

                    b.Property<bool?>("KlimaUredjaj")
                        .HasColumnType("bit");

                    b.Property<bool?>("Kuhinja")
                        .HasColumnType("bit");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SmjestajId")
                        .HasColumnType("int")
                        .HasColumnName("SmjestajID");

                    b.Property<bool?>("Terasa")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tv")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Smjestaj__3214EC276AF062E5");

                    b.HasIndex(new[] { "SmjestajId" }, "IX_SmjestajnaJedinica_SmjestajID");

                    b.ToTable("SmjestajnaJedinica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cijena = 50.00m,
                            Kapacitet = 2,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Standardna Soba",
                            Opis = "Standardna soba sa osnovnim sadržajima.",
                            SmjestajId = 1,
                            Terasa = false,
                            Tv = true
                        },
                        new
                        {
                            Id = 2,
                            Cijena = 80.00m,
                            DodatneUsluge = "Uključen doručak",
                            Kapacitet = 3,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Deluxe Soba",
                            Opis = "Deluxe soba sa dodatnim uslugama.",
                            SmjestajId = 1,
                            Terasa = true,
                            Tv = true
                        },
                        new
                        {
                            Id = 3,
                            Cijena = 120.00m,
                            DodatneUsluge = "Uključeni doručak i večera",
                            Kapacitet = 4,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Porodični Apartman",
                            Opis = "Prostrani apartman pogodan za porodice.",
                            SmjestajId = 2,
                            Terasa = true,
                            Tv = true
                        },
                        new
                        {
                            Id = 4,
                            Cijena = 70.00m,
                            Kapacitet = 2,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Apartman",
                            Opis = "Kompaktan apartman idealan za kraći boravak.",
                            SmjestajId = 3,
                            Terasa = false,
                            Tv = true
                        },
                        new
                        {
                            Id = 5,
                            Cijena = 200.00m,
                            DodatneUsluge = "Uključen doručak i večera",
                            Kapacitet = 4,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Luksuzni apartman",
                            Opis = "Luksuzan apartman sa prostranom terasom i pogledom na grad.",
                            SmjestajId = 4,
                            Terasa = true,
                            Tv = true
                        },
                        new
                        {
                            Id = 6,
                            Cijena = 300.00m,
                            DodatneUsluge = "Privatni bazen, sauna",
                            Kapacitet = 6,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Penthouse",
                            Opis = "Penthouse sa privatnim bazenom i ekskluzivnim sadržajima.",
                            SmjestajId = 4,
                            Terasa = true,
                            Tv = true
                        },
                        new
                        {
                            Id = 7,
                            Cijena = 40.00m,
                            Kapacitet = 2,
                            KlimaUredjaj = false,
                            Kuhinja = false,
                            Naziv = "Ekonomična soba",
                            Opis = "Jednostavna soba za kraće boravke po pristupačnoj cijeni.",
                            SmjestajId = 5,
                            Terasa = false,
                            Tv = true
                        },
                        new
                        {
                            Id = 8,
                            Cijena = 250.00m,
                            DodatneUsluge = "Uključeni svi obroci",
                            Kapacitet = 3,
                            KlimaUredjaj = true,
                            Kuhinja = true,
                            Naziv = "Executive suite",
                            Opis = "Ekskluzivan suite sa vrhunskim sadržajima.",
                            SmjestajId = 5,
                            Terasa = true,
                            Tv = true
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusOglasi", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__StatusOg__3214EC27976EBE5C");

                    b.ToTable("StatusOglasi", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Initial"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Draft"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Aktivan"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Update"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusPrijave", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__StatusPr__3214EC27C7C93E3C");

                    b.ToTable("StatusPrijave", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Initial"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Na cekanju"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Odobrena"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Otkazana"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipendije", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("BrojStipendisata")
                        .HasColumnType("int");

                    b.Property<double>("Iznos")
                        .HasColumnType("float");

                    b.Property<string>("Izvor")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("Kriterij")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("NivoObrazovanja")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("PotrebnaDokumentacija")
                        .IsRequired()
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<int>("StipenditorId")
                        .HasColumnType("int")
                        .HasColumnName("StipenditorID");

                    b.Property<string>("Uslovi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Stipendija");

                    b.HasIndex(new[] { "StatusId" }, "IX_Stipendije_StatusID");

                    b.HasIndex(new[] { "StipenditorId" }, "IX_Stipendije_StipenditorID");

                    b.ToTable("Stipendije", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            BrojStipendisata = 5,
                            Iznos = 1200.0,
                            Izvor = "Erasmus+ Program",
                            Kriterij = "Akademski uspjeh i preporuke",
                            NivoObrazovanja = "Studije",
                            PotrebnaDokumentacija = "Motivaciono pismo, akademski transkript",
                            StatusId = 2,
                            StipenditorId = 1,
                            Uslovi = "Uslov za prijavu na Erasmus+ program"
                        },
                        new
                        {
                            Id = 4,
                            BrojStipendisata = 10,
                            Iznos = 1500.0,
                            Izvor = "Fondacija za obrazovanje",
                            Kriterij = "Izvrsnost u akademskom radu",
                            NivoObrazovanja = "Srednje škole i univerzitet",
                            PotrebnaDokumentacija = "Akademski transkript, preporuka profesora",
                            StatusId = 2,
                            StipenditorId = 2,
                            Uslovi = "Visoki akademski rezultati"
                        },
                        new
                        {
                            Id = 10,
                            BrojStipendisata = 7,
                            Iznos = 2000.0,
                            Izvor = "Stipendije za master studije",
                            Kriterij = "Odličan akademski uspjeh",
                            NivoObrazovanja = "Master studije",
                            PotrebnaDokumentacija = "Prijava za stipendiju, akademski transkript",
                            StatusId = 2,
                            StipenditorId = 3,
                            Uslovi = "Studije u inostranstvu"
                        },
                        new
                        {
                            Id = 11,
                            BrojStipendisata = 8,
                            Iznos = 1800.0,
                            Izvor = "Stipendije za tehničke nauke",
                            Kriterij = "Visoki akademski rezultati u tehničkim naukama",
                            NivoObrazovanja = "Studije",
                            PotrebnaDokumentacija = "Akademski transkript, preporuka profesora",
                            StatusId = 2,
                            StipenditorId = 1,
                            Uslovi = "Izuzetni rezultati u tehničkim naukama"
                        },
                        new
                        {
                            Id = 12,
                            BrojStipendisata = 10,
                            Iznos = 1200.0,
                            Izvor = "Stipendije za socijalno ugrožene",
                            Kriterij = "Dokaz o socijalnom statusu",
                            NivoObrazovanja = "Studije",
                            PotrebnaDokumentacija = "Dokumentacija o socijalnom statusu, akademski transkript",
                            StatusId = 2,
                            StipenditorId = 2,
                            Uslovi = "Socijalno ugroženi studenti"
                        },
                        new
                        {
                            Id = 13,
                            BrojStipendisata = 5,
                            Iznos = 1500.0,
                            Izvor = "Stipendije za istraživačke projekte",
                            Kriterij = "Inovativni istraživački rad",
                            NivoObrazovanja = "Studije",
                            PotrebnaDokumentacija = "Opis istraživačkog projekta, akademski transkript",
                            StatusId = 2,
                            StipenditorId = 3,
                            Uslovi = "Rad na istraživačkom projektu"
                        },
                        new
                        {
                            Id = 14,
                            BrojStipendisata = 5,
                            Iznos = 1500.0,
                            Izvor = "Erasmus+ program",
                            Kriterij = "Odličan akademski uspjeh",
                            NivoObrazovanja = "Studije",
                            PotrebnaDokumentacija = "Motivaciono pismo, akademski transkript",
                            StatusId = 2,
                            StipenditorId = 1,
                            Uslovi = "Studije u inostranstvu kroz Erasmus+"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipenditori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TipUstanove")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK_Stipenditor");

                    b.HasIndex(new[] { "GradId" }, "IX_Stipenditor_GradID");

                    b.ToTable("Stipenditori", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresa = "Sarajevo, Bosna i Hercegovina",
                            Email = "erasmus@ec.europa.eu",
                            GradId = 7,
                            Link = "www.erasmusplus.com",
                            Naziv = "Erasmus+ Program",
                            TipUstanove = "Program"
                        },
                        new
                        {
                            Id = 2,
                            Adresa = "Banja Luka, Bosna i Hercegovina",
                            Email = "info@fondacijaobrazovanja.ba",
                            GradId = 1,
                            Link = "www.fondacijaobrazovanja.ba",
                            Naziv = "Fondacija za obrazovanje",
                            TipUstanove = "Fondacija"
                        },
                        new
                        {
                            Id = 3,
                            Adresa = "Tuzla, Bosna i Hercegovina",
                            Email = "kontakt@istrazivackeprojekt.com",
                            GradId = 8,
                            Link = "www.istrazivackeprojekt.com",
                            Naziv = "Stipendije za istraživačke projekte Tuzla",
                            TipUstanove = "Organizacija"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Studenti", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("BrojIndeksa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FakultetId")
                        .HasColumnType("int")
                        .HasColumnName("FakultetID");

                    b.Property<int>("GodinaStudija")
                        .HasColumnType("int");

                    b.Property<int>("NacinStudiranjaId")
                        .HasColumnType("int")
                        .HasColumnName("NacinStudiranjaID");

                    b.Property<decimal?>("ProsjecnaOcjena")
                        .HasColumnType("decimal(4, 2)");

                    b.Property<int>("SmjerId")
                        .HasColumnType("int")
                        .HasColumnName("SmjerID");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK_Student");

                    b.HasIndex(new[] { "FakultetId" }, "IX_Student_FakultetID");

                    b.HasIndex(new[] { "NacinStudiranjaId" }, "IX_Studenti_NacinStudiranjaID");

                    b.HasIndex(new[] { "SmjerId" }, "IX_Studenti_SmjerID");

                    b.ToTable("Studenti", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            BrojIndeksa = "IB200002",
                            FakultetId = 3,
                            GodinaStudija = 4,
                            NacinStudiranjaId = 1,
                            ProsjecnaOcjena = 10.00m,
                            SmjerId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 3,
                            BrojIndeksa = "IB200003",
                            FakultetId = 3,
                            GodinaStudija = 4,
                            NacinStudiranjaId = 1,
                            ProsjecnaOcjena = 10.00m,
                            SmjerId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 4,
                            BrojIndeksa = "IB210004",
                            FakultetId = 2,
                            GodinaStudija = 3,
                            NacinStudiranjaId = 1,
                            ProsjecnaOcjena = 9.50m,
                            SmjerId = 5,
                            Status = true
                        },
                        new
                        {
                            Id = 5,
                            BrojIndeksa = "IB210005",
                            FakultetId = 1,
                            GodinaStudija = 3,
                            NacinStudiranjaId = 2,
                            ProsjecnaOcjena = 9.75m,
                            SmjerId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 6,
                            BrojIndeksa = "IB220006",
                            FakultetId = 3,
                            GodinaStudija = 2,
                            NacinStudiranjaId = 1,
                            ProsjecnaOcjena = 8.90m,
                            SmjerId = 2,
                            Status = true
                        },
                        new
                        {
                            Id = 7,
                            BrojIndeksa = "IB220007",
                            FakultetId = 1,
                            GodinaStudija = 2,
                            NacinStudiranjaId = 2,
                            ProsjecnaOcjena = 8.50m,
                            SmjerId = 4,
                            Status = true
                        },
                        new
                        {
                            Id = 8,
                            BrojIndeksa = "IB230008",
                            FakultetId = 3,
                            GodinaStudija = 1,
                            NacinStudiranjaId = 1,
                            ProsjecnaOcjena = 8.00m,
                            SmjerId = 1,
                            Status = true
                        },
                        new
                        {
                            Id = 9,
                            BrojIndeksa = "IB230009",
                            FakultetId = 2,
                            GodinaStudija = 1,
                            NacinStudiranjaId = 2,
                            ProsjecnaOcjena = 7.80m,
                            SmjerId = 5,
                            Status = true
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.TipSmjestaja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Opis")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__TipSmjes__3214EC27E9E84D99");

                    b.ToTable("TipSmjestaja", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Hotel"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Apartman"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Uloge__3214EC27140192D2");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Student"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Univerziteti", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Logo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Skracenica")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Slika")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Telefon")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_Univerzitet");

                    b.HasIndex(new[] { "GradId" }, "IX_Univerzitet_GradID");

                    b.ToTable("Univerziteti", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "info@unsa.ba",
                            GradId = 7,
                            Link = "www.unsa.ba",
                            Naziv = "Univerzitet u Sarajevu",
                            Skracenica = "UNSA",
                            Telefon = "033-123-456"
                        },
                        new
                        {
                            Id = 2,
                            Email = "info@unmo.ba",
                            GradId = 6,
                            Link = "www.unmo.ba",
                            Naziv = "Univerzitet \"Džemal Bijedić\"",
                            Skracenica = "UNMO",
                            Telefon = "036-123-456"
                        },
                        new
                        {
                            Id = 3,
                            Email = "info@untz.ba",
                            GradId = 8,
                            Link = "www.untz.ba",
                            Naziv = "Univerzitet u Tuzli",
                            Skracenica = "UNTZ",
                            Telefon = "035-123-456"
                        });
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Fakulteti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Univerziteti", "Univerzitet")
                        .WithMany("Fakultetis")
                        .HasForeignKey("UniverzitetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Fakultet_Univerzitet_UniverzitetID");

                    b.Navigation("Univerzitet");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Komentari", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Komentaris")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_Komentar_Korisnik");

                    b.HasOne("StudentOglasi.Services.Database.Komentari", "ParentKomentar")
                        .WithMany("InverseParentKomentar")
                        .HasForeignKey("ParentKomentarId")
                        .HasConstraintName("FK_Komentar_ParentComment");

                    b.Navigation("Korisnik");

                    b.Navigation("ParentKomentar");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Korisnici", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Uloge", "Uloga")
                        .WithMany("Korisnicis")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FK_Korisnici_Uloge");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Like", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Korisnici", "Korisnik")
                        .WithMany("Likes")
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Like_Korisnik_KorisnikID");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Obavijesti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Objave", "Objave")
                        .WithMany("Obavijestis")
                        .HasForeignKey("ObjaveId")
                        .HasConstraintName("FK_Obavijesti_Objave");

                    b.HasOne("StudentOglasi.Services.Database.Oglasi", "Oglasi")
                        .WithMany("Obavijestis")
                        .HasForeignKey("OglasiId")
                        .HasConstraintName("FK_Obavijesti_Oglasi");

                    b.HasOne("StudentOglasi.Services.Database.Smjestaji", "Smjestaji")
                        .WithMany("Obavijestis")
                        .HasForeignKey("SmjestajiId")
                        .HasConstraintName("FK_Obavijesti_Smjestaji");

                    b.Navigation("Objave");

                    b.Navigation("Oglasi");

                    b.Navigation("Smjestaji");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Objave", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Objaves")
                        .HasForeignKey("KategorijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Objava_Kategorija_KategorijaID");

                    b.Navigation("Kategorija");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Ocjene", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("Ocjenes")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Ocjene__StudentI__339FAB6E");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Organizacije", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Organizacijes")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Firma_Grad_GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Prakse", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Oglasi", "IdNavigation")
                        .WithOne("Prakse")
                        .HasForeignKey("StudentOglasi.Services.Database.Prakse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Praksa_Oglas_ID");

                    b.HasOne("StudentOglasi.Services.Database.Organizacije", "Organizacija")
                        .WithMany("Prakses")
                        .HasForeignKey("OrganizacijaId")
                        .IsRequired()
                        .HasConstraintName("FK_Prakse_Organizacija");

                    b.HasOne("StudentOglasi.Services.Database.StatusOglasi", "Status")
                        .WithMany("Prakses")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Prakse_StatusOglasi");

                    b.Navigation("IdNavigation");

                    b.Navigation("Organizacija");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijavePraksa", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Prakse", "Praksa")
                        .WithMany("PrijavePraksas")
                        .HasForeignKey("PraksaId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaPraksa_Praksa_PraksaId");

                    b.HasOne("StudentOglasi.Services.Database.StatusPrijave", "Status")
                        .WithMany("PrijavePraksas")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavePraksa_StatusPrijave");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("PrijavePraksas")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaPraksa_Student_StudentId");

                    b.Navigation("Praksa");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.PrijaveStipendija", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.StatusPrijave", "Status")
                        .WithMany("PrijaveStipendijas")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijaveStipendija_StatusPrijave");

                    b.HasOne("StudentOglasi.Services.Database.Stipendije", "Stipendija")
                        .WithMany("PrijaveStipendijas")
                        .HasForeignKey("StipendijaId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaStipendija_Stipendija_StipendijaID");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("PrijaveStipendijas")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_PrijavaStipendija_Student_StudentId");

                    b.Navigation("Status");

                    b.Navigation("Stipendija");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Rezervacije", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.SmjestajnaJedinica", "SmjestajnaJedinica")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("SmjestajnaJedinicaId")
                        .IsRequired()
                        .HasConstraintName("FK__Rezervaci__Smjes__3D2915A8");

                    b.HasOne("StudentOglasi.Services.Database.StatusPrijave", "Status")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK__Rezervaci__Statu__3E1D39E1");

                    b.HasOne("StudentOglasi.Services.Database.Studenti", "Student")
                        .WithMany("Rezervacijes")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK__Rezervaci__Stude__3C34F16F");

                    b.Navigation("SmjestajnaJedinica");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Slike", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Smjestaji", "Smjestaj")
                        .WithMany("Slikes")
                        .HasForeignKey("SmjestajId")
                        .HasConstraintName("FK_Slike_Smjestaji");

                    b.HasOne("StudentOglasi.Services.Database.SmjestajnaJedinica", "SmjestajnaJedinica")
                        .WithMany("Slikes")
                        .HasForeignKey("SmjestajnaJedinicaId")
                        .HasConstraintName("FK_Slike_SmjestajnaJedinica");

                    b.Navigation("Smjestaj");

                    b.Navigation("SmjestajnaJedinica");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjeroviFakulteti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Fakulteti", "Fakultet")
                        .WithMany("SmjeroviFakultetis")
                        .HasForeignKey("FakultetId")
                        .IsRequired()
                        .HasConstraintName("FK__SmjeroviF__Fakul__6CD828CA");

                    b.HasOne("StudentOglasi.Services.Database.Smjerovi", "Smjer")
                        .WithMany("SmjeroviFakultetis")
                        .HasForeignKey("SmjerId")
                        .IsRequired()
                        .HasConstraintName("FK__SmjeroviF__Smjer__6BE40491");

                    b.Navigation("Fakultet");

                    b.Navigation("Smjer");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjestaji", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Smjestajis")
                        .HasForeignKey("GradId")
                        .IsRequired()
                        .HasConstraintName("FK__Smjestaji__GradI__2180FB33");

                    b.HasOne("StudentOglasi.Services.Database.TipSmjestaja", "TipSmjestaja")
                        .WithMany("Smjestajis")
                        .HasForeignKey("TipSmjestajaId")
                        .HasConstraintName("FK__Smjestaji__TipSm__40F9A68C");

                    b.Navigation("Grad");

                    b.Navigation("TipSmjestaja");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjestajnaJedinica", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Smjestaji", "Smjestaj")
                        .WithMany("SmjestajnaJedinicas")
                        .HasForeignKey("SmjestajId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK__Smjestajn__Smjes__4F47C5E3");

                    b.Navigation("Smjestaj");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipendije", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Oglasi", "IdNavigation")
                        .WithOne("Stipendije")
                        .HasForeignKey("StudentOglasi.Services.Database.Stipendije", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Stipendija_Oglas_ID");

                    b.HasOne("StudentOglasi.Services.Database.StatusOglasi", "Status")
                        .WithMany("Stipendijes")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Stipendije_StatusOglasi");

                    b.HasOne("StudentOglasi.Services.Database.Stipenditori", "Stipenditor")
                        .WithMany("Stipendijes")
                        .HasForeignKey("StipenditorId")
                        .IsRequired()
                        .HasConstraintName("FK_Stipendije_Stipenditor");

                    b.Navigation("IdNavigation");

                    b.Navigation("Status");

                    b.Navigation("Stipenditor");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipenditori", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Stipenditoris")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Stipenditor_Grad_GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Studenti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Fakulteti", "Fakultet")
                        .WithMany("Studentis")
                        .HasForeignKey("FakultetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_Fakultet_FakultetID");

                    b.HasOne("StudentOglasi.Services.Database.Korisnici", "IdNavigation")
                        .WithOne("Studenti")
                        .HasForeignKey("StudentOglasi.Services.Database.Studenti", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Student_Korisnik_ID");

                    b.HasOne("StudentOglasi.Services.Database.NacinStudiranja", "NacinStudiranja")
                        .WithMany("Studentis")
                        .HasForeignKey("NacinStudiranjaId")
                        .IsRequired()
                        .HasConstraintName("FK_Studenti_NacinStudiranja");

                    b.HasOne("StudentOglasi.Services.Database.Smjerovi", "Smjer")
                        .WithMany("Studentis")
                        .HasForeignKey("SmjerId")
                        .IsRequired()
                        .HasConstraintName("FK_Studenti_Smjerovi");

                    b.Navigation("Fakultet");

                    b.Navigation("IdNavigation");

                    b.Navigation("NacinStudiranja");

                    b.Navigation("Smjer");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Univerziteti", b =>
                {
                    b.HasOne("StudentOglasi.Services.Database.Grad", "Grad")
                        .WithMany("Univerzitetis")
                        .HasForeignKey("GradId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Univerzitet_Grad_GradID");

                    b.Navigation("Grad");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Fakulteti", b =>
                {
                    b.Navigation("SmjeroviFakultetis");

                    b.Navigation("Studentis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Grad", b =>
                {
                    b.Navigation("Organizacijes");

                    b.Navigation("Smjestajis");

                    b.Navigation("Stipenditoris");

                    b.Navigation("Univerzitetis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Objaves");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Komentari", b =>
                {
                    b.Navigation("InverseParentKomentar");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Korisnici", b =>
                {
                    b.Navigation("Komentaris");

                    b.Navigation("Likes");

                    b.Navigation("Studenti");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.NacinStudiranja", b =>
                {
                    b.Navigation("Studentis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Objave", b =>
                {
                    b.Navigation("Obavijestis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Oglasi", b =>
                {
                    b.Navigation("Obavijestis");

                    b.Navigation("Prakse");

                    b.Navigation("Stipendije");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Organizacije", b =>
                {
                    b.Navigation("Prakses");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Prakse", b =>
                {
                    b.Navigation("PrijavePraksas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjerovi", b =>
                {
                    b.Navigation("SmjeroviFakultetis");

                    b.Navigation("Studentis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Smjestaji", b =>
                {
                    b.Navigation("Obavijestis");

                    b.Navigation("Slikes");

                    b.Navigation("SmjestajnaJedinicas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.SmjestajnaJedinica", b =>
                {
                    b.Navigation("Rezervacijes");

                    b.Navigation("Slikes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusOglasi", b =>
                {
                    b.Navigation("Prakses");

                    b.Navigation("Stipendijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.StatusPrijave", b =>
                {
                    b.Navigation("PrijavePraksas");

                    b.Navigation("PrijaveStipendijas");

                    b.Navigation("Rezervacijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipendije", b =>
                {
                    b.Navigation("PrijaveStipendijas");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Stipenditori", b =>
                {
                    b.Navigation("Stipendijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Studenti", b =>
                {
                    b.Navigation("Ocjenes");

                    b.Navigation("PrijavePraksas");

                    b.Navigation("PrijaveStipendijas");

                    b.Navigation("Rezervacijes");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.TipSmjestaja", b =>
                {
                    b.Navigation("Smjestajis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Uloge", b =>
                {
                    b.Navigation("Korisnicis");
                });

            modelBuilder.Entity("StudentOglasi.Services.Database.Univerziteti", b =>
                {
                    b.Navigation("Fakultetis");
                });
#pragma warning restore 612, 618
        }
    }
}
